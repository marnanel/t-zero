
Constant TOPIARY_PREFIX_MAX = 23;
Constant TOPIARY_SUFFIX_MAX = 25;
Constant TOPIARY_VERB_MAX = 15;
Constant TOPIARY_LABEL_BLANK = 100;

Constant TOPIARY_MONSTER_COUNT = 36;
Array topiary_monster_prefix -> TOPIARY_MONSTER_COUNT;
Array topiary_monster_suffix -> TOPIARY_MONSTER_COUNT;
Array topiary_monster_verb   -> TOPIARY_MONSTER_COUNT;

Array topiary_prefixes -->
          "latch" "bront" "bug" "bumble" "catter" "cobra" "cock" "croco" "drag" "elepo" "equest" "grue" "gryph" "harp" "hippo" "kanga" "min" "ptero" "rin" "squash" "sphinx" "thunder" "uni" "vamp";

Array topiary_suffixes --> "key" "aboo" "asaurus" "atoo" "blatter" "boon" "corn" "dactyl" "eater" "ephant" "erpent" "garoo" "gator" "griff" "goyle" "lizard" "lope" "oceros" "opod" "otaur" "phoon" "pillar" "quatch" "queen" "rybdis" "potamus";

[TopiaryPrefix n;

    switch (n) {
         0: print "latch";
         1: print "bront";
         2: print "bug";
         3: print "bumble";
         4: print "catter";
         5: print "cobra";
         6: print "cock";
         7: print "croco";
         8: print "drag";
         9: print "elepo";
        10: print "equest";
        11: print "grue";
        12: print "gryph";
        13: print "harp";
        14: print "hippo";
        15: print "kanga";
        16: print "min";
        17: print "ptero";
        18: print "rin";
        19: print "squash";
        20: print "sphinx";
        21: print "thunder";
        22: print "uni";
        23: print "vamp";

        default:
            print n;
    }
];

[TopiarySuffix n;
    switch (n) {
         0: print "key";
         1: print "aboo";
         2: print "asaurus";
         3: print "atoo";
         4: print "blatter";
         5: print "boon";
         6: print "corn";
         7: print "dactyl";
         8: print "eater";
         9: print "ephant";
        10: print "erpent";
        11: print "garoo";
        12: print "gator";
        13: print "griff";
        14: print "goyle";
        15: print "lizard";
        16: print "lope";
        17: print "oceros";
        18: print "opod";
        19: print "otaur";
        20: print "phoon";
        21: print "pillar";
        22: print "quatch";
        23: print "queen";
        24: print "rybdis";
        25: print "potamus";
        default:
            print n;
    }
];

[TopiaryVerb n gerund needse;

    needse = 0;

    switch (n) {
         0: print "bellow";
         1: print "bristl"; needse = 1;
         2: print "caterwaul";
         3: print "glower";
         4: print "grumbl"; needse = 1;
         5: print "hunker";
         6: print "harumph";
         7: print "lumber";
         8: print "moan";
         9: print "mumbl"; needse = 1;
        10: print "ruminat"; needse = 1;
        11: print "slaver";
        12: print "slither";
        13: print "sneer";
        14: print "soar";
        15: print "squat";
                ! "squatting" vs "squats". What a nuisance.
                if (gerund) { print "t"; }

        default:
            print n;
     }

     if (gerund==1) {
         print "ing";
     } else {
         if (needse==1) {
                 print "es";
         } else {
                 print "s";
         }
     }
];

[TopiaryMoveFloaters whither;

    move TangledRoots to whither;

    TopiaryMonsterNE.room_init();
    TopiaryMonsterSE.room_init();
    TopiaryMonsterSW.room_init();
    TopiaryMonsterNW.room_init();
];

[TopiaryReset i pn sn;

    ! The prefixes and suffixes are random, except
    ! that one prefix and one suffix must be zero
    ! (and no other prefixes or suffixes may be zero).

    ! pn is the array index where the prefix will be 0;
    ! sn is the same for the suffix.

    ! I don't know whether we should make
    ! sure that pn and sn differ.

    ! Note that random() in Inform is 1-based.

    pn = random(TOPIARY_PREFIX_MAX)-1;
    sn = random(TOPIARY_SUFFIX_MAX)-1;

    for (i=0 : i<TOPIARY_MONSTER_COUNT : i++) {
            if (i==pn) {
                    topiary_monster_prefix -> i = 0;
            } else {
                    topiary_monster_prefix -> i =
                        random(TOPIARY_PREFIX_MAX);
            }

            if (i==sn) {
                    topiary_monster_suffix -> i = 0;
            } else {
                    topiary_monster_suffix -> i =
                        random(TOPIARY_SUFFIX_MAX);
            }

            topiary_monster_verb -> i =
                  random(TOPIARY_VERB_MAX) - 1;
    }

    "As you enter the topiary of time, you hear the dry rustling of
    leaves as the creatures, shape-shifters all, assume imposing postures.";
];

! The original game requires you to read the label
! on each tool separately; you can't "read extractor" etc.
! I haven't replicated this because it seems like a mistake.

Class TopiaryTool
class Thing
has
    legible,
with
label
    TOPIARY_LABEL_BLANK;

Constant LABEL_IS_BLANK = "The label is a blank slate.^";
Constant LABEL_READS = "The label reads: ~";

TopiaryTool RootExtractor "Root Extractor" ShedShelf
with
    name
        "root" "extractor" "extracter" "tool" "label",
    initial
       "A root extractor has been grounded here.",
    description
        "The root extractor is a fork-like implement used to pull up roots
    and weeds and tubers and things. It is marked by a translucent label.",
    before [;
        Consult, Read:
        if (self.label==TOPIARY_LABEL_BLANK) {
             print (string) LABEL_IS_BLANK;
             rtrue;
        } else {
             print (string) LABEL_READS;
             ! XXX check I haven't got these the wrong way round
             TopiaryPrefix(self.label);
             "~.";
        }
    ];

TopiaryTool FixerUpper "Fixer-Upper" ShedShelf
with
    name
        "fixer" "upper" "fixer-upper" "tool" "label",
    initial
        "A fixer-upper lies here, unfixed to anything.",
    description
        "The fixer-upper is a fork-like implement used to apply finishing
touches. It looks like the root extractor turned on end. It is marked by a
translucent label.",
    before [;
        Consult, Read:
        if (self.label==TOPIARY_LABEL_BLANK) {
             print (string) LABEL_IS_BLANK;
             rtrue;
        } else {
             print (string) LABEL_READS;
             ! XXX check I haven't got these the wrong way round
             TopiarySuffix(self.label);
             "~.";
        }
    ];


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Constant TEXT_BUFFER_LENGTH = 16;
Array text_buffer -> TEXT_BUFFER_LENGTH;

Class TopiaryMonster
has
    animate static
with
description
    "XXX",
monstername
    ! can't we declare this as an array of length N?
    0 0 0 0 0 0 0 0,
parse_name [i j w matched;
        if (parser_action==##TheSame) {
                ! Idk whether we need something here.
                ! Let's assume not until we know otherwise.
                return 0;
        }

        for (::i++) {
                w = NextWord(); matched = 0;

                if (w=='monster' || w=='hedge') {
                        matched = 1;
                } else if (w=='monsters' || w=='hedges') {
                        matched = 1;
                        parser_action = ##PluralFound;
                }

                if (matched==0) {
                        wn--;

                        if (TextReader()==0) return i;

                        for (j=0: j<8: j++)
                                if ((self.&monstername)->j ~= text_buffer->j)
                                        return i;

                        matched = 1;

                }

                if (matched==0) {
                        ! This one didn't match, so we know how many matched
                        return i;
                }

        }
    ],

article
    "the",

short_name [ i;
        while (((self.&monstername)->i) ~= 0)
                print (char) (self.&monstername)->i++;
        rtrue;
    ],

room_init [ i index;

        move self to location;

        index = (location.pos_x + self.pos_x) +
            (location.pos_y + self.pos_y)*6;

        for (i=0:i<TEXT_BUFFER_LENGTH:i++) {
                text_buffer->i = 0;
                self.&monstername->i = 0;
        }

        i = self.copy_in(0,
            topiary_prefixes -->
             (topiary_monster_prefix -> index));

        self.copy_in(i,
            topiary_suffixes -->
             (topiary_monster_suffix -> index));
    ],
copy_in [ outpos s inpos;

        print "(begins)^";
        s.print_to_array(text_buffer);

        print "  copied^";
        for (:inpos < text_buffer->1: inpos++) {

                self.&monstername->(outpos) = text_buffer->(inpos+2);

                print "  monstername ";
                print outpos;
                print " becomes ";
                print self.&monstername->(outpos);
                print " ";
                print (char) self.&monstername->(outpos);
                print "^";

                outpos++;
        }

        print "(ends)^";

        return outpos;

    ],
react_before
    [ ;
        Go:
        if (noun==self.door_to) {
                self.initial(1);
                rtrue;
        }
        rfalse;
    ];


!  Copies word "wn" from what the player most recently typed, putting it as
!  plain text into text_buffer, returning false if no such word is there
!  Stolen shamelessly from Graham Nelson's "Balances"

[ TextReader point i j len;

   for (i=0:i<8:i++) text_buffer->i = 0;
   if (wn > parse->1) { wn++; rfalse; }
   i=wn*4+1; j=parse->i; point=j+buffer; len=parse->(i-1);

   for (i=0:i<len && i<7:i++) text_buffer->i = point->i;

   wn++; rtrue;
];


TopiaryMonster TopiaryMonsterNE
with
dirname
    "Northeast",
door_to
    ne_to,
pos_x
    1,
pos_y
    0;

TopiaryMonster TopiaryMonsterSE
with
dirname
    "Southeast",
door_to
    se_to,
pos_x
    1,
pos_y
    1;

TopiaryMonster TopiaryMonsterSW
with
dirname
    "Southwest",
door_to
    sw_to,
pos_x
    0,
pos_y
    1;

TopiaryMonster TopiaryMonsterNW
with
dirname
    "Northwest",
door_to
    nw_to,
pos_x
    0,
pos_y
    0;

Class TopiaryRoom
has
    light
with
cant_go [;
    ! XXX figure out what we do when noun==u_to or d_to
    print "You wouldn't want to mess with the ";
    TopiaryVerb(1, 1);
    print " ";
    TopiaryPrefix(1);
    TopiarySuffix(1);
    ".";
    ],
after [;
    TopiaryMoveFloaters(self);
    ],
description
    ""; ! do the topiary rooms have any description at all?

Object TangledRoots "tangled roots"
with
initial
    "Tangled roots, none alike, twist and turn here.";

Constant TOPIARY_EDGE_HEDGE
    "An unhacked hedge bounds the topiary in that direction.";

Constant TOPIARY_MIDDLE_HEDGE
    "Your path is blocked by a hedge growing in the middle of the maze.";

! Now the rooms themselves. They're generated from a map.
Include "TopiaryRooms.inf";

