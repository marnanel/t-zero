
Constant TOPIARY_PREFIX_COUNT = 24;
Constant TOPIARY_SUFFIX_COUNT = 26;
Constant TOPIARY_VERB_COUNT = 16;
Constant TOPIARY_BLANK_LABEL = 100;

[TopiaryPrefix n;

    switch (n) {
         0: print "latch";
         1: print "bront";
         2: print "bug";
         3: print "bumble";
         4: print "catter";
         5: print "cobra";
         6: print "cock";
         7: print "croco";
         8: print "drag";
         9: print "elepo";
        10: print "equest";
        11: print "grue";
        12: print "gryph";
        13: print "harp";
        14: print "hippo";
        15: print "kanga";
        16: print "min";
        17: print "ptero";
        18: print "rin";
        19: print "squash";
        20: print "sphinx";
        21: print "thunder";
        22: print "uni";
        23: print "vamp";

        default:
            print "[?]";
    }
];

[TopiarySuffix n;
    switch (n) {
         0: print "key";
         1: print "aboo";
         2: print "asaurus";
         3: print "atoo";
         4: print "blatter";
         5: print "boon";
         6: print "corn";
         7: print "dactyl";
         8: print "eater";
         9: print "ephant";
        10: print "erpent";
        11: print "garoo";
        12: print "gator";
        13: print "griff";
        14: print "goyle";
        15: print "lizard";
        16: print "lope";
        17: print "oceros";
        18: print "opod";
        19: print "otaur";
        20: print "phoon";
        21: print "pillar";
        22: print "quatch";
        23: print "queen";
        24: print "rybdis";
        25: print "potamus";
        default:
            print "[?]";
    }
];

[TopiaryVerb n gerund needse;

    needse = 0;

    switch (n) {
         0: print "bellow";
         1: print "bristl"; needse = 1;
         2: print "caterwaul";
         3: print "glower";
         4: print "grumbl"; needse = 1;
         5: print "hunker";
         6: print "harumph";
         7: print "lumber";
         8: print "moan";
         9: print "mumbl"; needse = 1;
        10: print "ruminat"; needse = 1;
        11: print "slaver";
        12: print "slither";
        13: print "sneer";
        14: print "soar";
        15: print "squat";
                ! "squatting" vs "squats". What a nuisance.
                if (gerund) { print "t"; }
     }

     if (gerund==1) {
         print "ing";
     } else {
         if (needse==1) {
                 print "es";
         } else {
                 print "s";
         }
     }
];

[TopiaryMoveFloaters whither;

    move TopiaryMonsterNE to whither;
    move TopiaryMonsterSE to whither;
    move TopiaryMonsterSW to whither;
    move TopiaryMonsterNW to whither;

];

[TopiaryReset ;

    ! XXX reset monsters here

    TopiaryMoveFloaters(Topiary02);

    "As you enter the topiary of time, you hear the dry rustling of
    leaves as the creatures, shape-shifters all, assume imposing postures.";
];

Class TopiaryMonster
has
    animate
with
description
    "XXX",
initial
    [;
        print "A ";
        TopiaryPrefix(1);
        TopiarySuffix(1);
        print " ";
        TopiaryVerb(1, 0);
        " to the northwest.";
    ];

TopiaryMonster TopiaryMonsterNE
with
offset
    (1) (-1);

TopiaryMonster TopiaryMonsterSE
with
offset
    (1) (1);

TopiaryMonster TopiaryMonsterSW
with
offset
    (-1) (1);

TopiaryMonster TopiaryMonsterNW
with
offset
    (-1) (-1);

Class TopiaryRoom
has
    light
with
cant_go [;
    ! XXX figure out what we do when noun==u_to or d_to
    print "You wouldn't want to mess with the ";
    TopiaryVerb(1, 1);
    print " ";
    TopiaryPrefix(1);
    TopiarySuffix(1);
    ".";
    ],
    ! probably wrong, but leave it for now
description
    "Tangled roots, none alike, twist and turn here.";

Constant TOPIARY_EDGE_HEDGE
    "An unhacked hedge bounds the topiary in that direction.";

Constant TOPIARY_MIDDLE_HEDGE
    "Your path is blocked by a hedge growing in the middle of the maze.";

! Now the rooms themselves. They're generated from a map.
Include "TopiaryRooms.inf";

