
Constant TOPIARY_PREFIX_COUNT = 24;
Constant TOPIARY_SUFFIX_COUNT = 26;
Constant TOPIARY_VERB_COUNT = 16;

Constant TOPIARY_MONSTER_COUNT = 36;
Array topiary_monster_prefix -> TOPIARY_MONSTER_COUNT;
Array topiary_monster_suffix -> TOPIARY_MONSTER_COUNT;
Array topiary_monster_verb   -> TOPIARY_MONSTER_COUNT;

[TopiaryPrefix n;

    switch (n) {
         0: print "latch";
         1: print "bront";
         2: print "bug";
         3: print "bumble";
         4: print "catter";
         5: print "cobra";
         6: print "cock";
         7: print "croco";
         8: print "drag";
         9: print "elepo";
        10: print "equest";
        11: print "grue";
        12: print "gryph";
        13: print "harp";
        14: print "hippo";
        15: print "kanga";
        16: print "min";
        17: print "ptero";
        18: print "rin";
        19: print "squash";
        20: print "sphinx";
        21: print "thunder";
        22: print "uni";
        23: print "vamp";

        default:
            print n;
    }
];

[TopiarySuffix n;
    switch (n) {
         0: print "key";
         1: print "aboo";
         2: print "asaurus";
         3: print "atoo";
         4: print "blatter";
         5: print "boon";
         6: print "corn";
         7: print "dactyl";
         8: print "eater";
         9: print "ephant";
        10: print "erpent";
        11: print "garoo";
        12: print "gator";
        13: print "griff";
        14: print "goyle";
        15: print "lizard";
        16: print "lope";
        17: print "oceros";
        18: print "opod";
        19: print "otaur";
        20: print "phoon";
        21: print "pillar";
        22: print "quatch";
        23: print "queen";
        24: print "rybdis";
        25: print "potamus";
        default:
            print n;
    }
];

[TopiaryVerb n gerund needse;

    needse = 0;

    switch (n) {
         0: print "bellow";
         1: print "bristl"; needse = 1;
         2: print "caterwaul";
         3: print "glower";
         4: print "grumbl"; needse = 1;
         5: print "hunker";
         6: print "harumph";
         7: print "lumber";
         8: print "moan";
         9: print "mumbl"; needse = 1;
        10: print "ruminat"; needse = 1;
        11: print "slaver";
        12: print "slither";
        13: print "sneer";
        14: print "soar";
        15: print "squat";
                ! "squatting" vs "squats". What a nuisance.
                if (gerund) { print "t"; }

        default:
            print n;
     }

     if (gerund==1) {
         print "ing";
     } else {
         if (needse==1) {
                 print "es";
         } else {
                 print "s";
         }
     }
];

[TopiaryMoveFloaters whither;

    move TangledRoots to whither;

    move TopiaryMonsterNE to whither;
    move TopiaryMonsterSE to whither;
    move TopiaryMonsterSW to whither;
    move TopiaryMonsterNW to whither;

];

[TopiaryReset i pn sn;

    ! The prefixes and suffixes are random, except
    ! that one prefix and one suffix must be zero
    ! (and no other prefixes or suffixes may be zero).

    ! pn is the array index where the prefix will be 0;
    ! sn is the same for the suffix.

    ! I don't know whether we should make
    ! sure that pn and sn differ.

    ! Note that random() in Inform is 1-based.

    pn = random(TOPIARY_PREFIX_COUNT)-1;
    sn = random(TOPIARY_SUFFIX_COUNT)-1;

    for (i=0 : i<TOPIARY_MONSTER_COUNT : i++) {
            if (i==pn) {
                    topiary_monster_prefix -> i = 0;
            } else {
                    topiary_monster_prefix -> i =
                        random(TOPIARY_PREFIX_COUNT);
            }

            if (i==sn) {
                    topiary_monster_suffix -> i = 0;
            } else {
                    topiary_monster_suffix -> i =
                        random(TOPIARY_SUFFIX_COUNT);
            }

            topiary_monster_verb -> i =
                  random(TOPIARY_VERB_COUNT) - 1;
    }

    "As you enter the topiary of time, you hear the dry rustling of
    leaves as the creatures, shape-shifters all, assume imposing postures.";
];

Class TopiaryMonster
has
    animate static
with
description
    "XXX",
initial
    [ reacting ourx oury index;

        ! This routine produces both the
        !  "A foo bars to the northwest."
        ! and
        !  "You wouldn't want to mess with the barring foo."
        ! messages. "reacting" is 1 for the "you wouldn't
        ! want to mess".

        ourx = location.pos_x + self.pos_x;
        oury = location.pos_y + self.pos_y;

        index = oury*6 + ourx;

        if (reacting) {

            print "You wouldn't want to mess with the ";
            TopiaryVerb(topiary_monster_verb -> index, 1);
            print " ";
            TopiaryPrefix(topiary_monster_prefix -> index);
            TopiarySuffix(topiary_monster_suffix -> index);
            print ".^";

         } else {

            print "A ";
            TopiaryPrefix(topiary_monster_prefix -> index);
            TopiarySuffix(topiary_monster_suffix -> index);
            print " ";
            TopiaryVerb(topiary_monster_verb -> index, 0);
            print " to the ";
            print (string) self.dirname;
            print ".";

         }
    ],
react_before
    [ ;
        Go:
        if (noun==self.door_to) {
                self.initial(1);
                rtrue;
        }
        rfalse;
    ];

TopiaryMonster TopiaryMonsterNE
with
dirname
    "northeast",
door_to
    ne_to,
pos_x
    1,
pos_y
    0;

TopiaryMonster TopiaryMonsterSE
with
dirname
    "southeast",
door_to
    se_to,
pos_x
    1,
pos_y
    1;

TopiaryMonster TopiaryMonsterSW
with
dirname
    "southwest",
door_to
    sw_to,
pos_x
    0,
pos_y
    1;

TopiaryMonster TopiaryMonsterNW
with
dirname
    "northwest",
door_to
    nw_to,
pos_x
    0,
pos_y
    0;

Class TopiaryRoom
has
    light
with
cant_go [;
    ! XXX figure out what we do when noun==u_to or d_to
    print "You wouldn't want to mess with the ";
    TopiaryVerb(1, 1);
    print " ";
    TopiaryPrefix(1);
    TopiarySuffix(1);
    ".";
    ],
after [;
    TopiaryMoveFloaters(self);
    ],
description
    ""; ! do the topiary rooms have any description at all?

Object TangledRoots "tangled roots"
with
initial
    "Tangled roots, none alike, twist and turn here.";

Constant TOPIARY_EDGE_HEDGE
    "An unhacked hedge bounds the topiary in that direction.";

Constant TOPIARY_MIDDLE_HEDGE
    "Your path is blocked by a hedge growing in the middle of the maze.";

! Now the rooms themselves. They're generated from a map.
Include "TopiaryRooms.inf";

